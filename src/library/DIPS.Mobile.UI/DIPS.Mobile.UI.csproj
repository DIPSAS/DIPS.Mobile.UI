<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net9.0;net9.0-ios;net9.0-android;</TargetFrameworks>

        <UseMaui>true</UseMaui>
        <SingleProject>true</SingleProject>
        <ImplicitUsings>enable</ImplicitUsings>

        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.7.9</SupportedOSPlatformVersion>
        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">31.0</SupportedOSPlatformVersion>
        <Nullable>enable</Nullable>
        <RepositoryType>github</RepositoryType>
        <LangVersion>default</LangVersion>
        
        <MauiEnableXamlCBindingWithSourceCompilation>true</MauiEnableXamlCBindingWithSourceCompilation>
        <WarningsAsErrors>XC0022;XC0023;XC0045;XC0103</WarningsAsErrors>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net9.0-ios|AnyCPU'">
        <CreatePackage>false</CreatePackage>
    </PropertyGroup>

    <PropertyGroup>
        <GitInfoReportImportance>high</GitInfoReportImportance>
        <PackageId>DIPS.Mobile.UI</PackageId>
        <Summary>To support developers building DIPS mobile native apps, the designers maintain a Design System with style resources and components to use. The components are available for the developers by using DIPS.Mobile.UI as a dependency for their app.</Summary>
        <Authors>DIPS AS</Authors>
        <Owners>DIPS AS</Owners>
        <NeutralLanguage>nb</NeutralLanguage>
        <Product>DIPS.Mobile.UI (net9.0)</Product>
        <Copyright>Â© DIPS AS 2024. All rights reserved.</Copyright>
        <PackageProjectUrl>https://github.com/DIPSAS/DIPS.Mobile.UI</PackageProjectUrl>
        <RepositoryUrl>https://github.com/DIPSAS/DIPS.Mobile.UI</RepositoryUrl>
        <DefineConstants>$(DefineConstants);</DefineConstants>
        <UseFullSemVerForNuGet>false</UseFullSemVerForNuGet>
        <Title>DIPS.Mobile.UI</Title>
        <Description>To support developers building DIPS mobile native apps, the designers maintain a Design System with style resources and components to use. The components are available for the developers by using DIPS.Mobile.UI as a dependency for their app.</Description>
        <PackageIcon>dips.png</PackageIcon>
        <Product>$(AssemblyName) ($(TargetFramework))</Product>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyFileVersion>1.0.0.0</AssemblyFileVersion>
        <Version>1.0.0-pre1</Version>
        <PackageVersion>$(Version)$(VersionSuffix)</PackageVersion>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <PackageTags>dotnet,maui,ui,ux,dips</PackageTags>
        <Configurations>Debug;Release</Configurations>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>

    <PropertyGroup>
        <_DROID Condition=" $(TargetFramework.ToLowerInvariant().Contains('android')) ">true</_DROID>
        <_IOS Condition=" $(TargetFramework.ToLowerInvariant().Contains('ios')) ">true</_IOS>
        <_MOBILE Condition=" '$(_DROID)' == 'true' OR '$(_IOS)' == 'true' ">true</_MOBILE>

        <DefineConstants Condition=" '$(_DROID)' == 'true' ">$(DefineConstants);__ANDROID__;__MOBILE__;</DefineConstants>
        <DefineConstants Condition=" '$(_IOS)' == 'true' ">$(DefineConstants);__IOS__;__MOBILE__;</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net9.0-ios|AnyCPU'">
        <CreatePackage>false</CreatePackage>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DocumentationFile>bin\Release\DIPS.Mobile.UI.xml</DocumentationFile>
    </PropertyGroup>

    <!-- Remove Android -->
    <ItemGroup Condition="$(TargetFramework.StartsWith('net9.0-android')) != true">
        <Compile Remove="**\Android\**\*.cs" />
        <None Include="**\Android\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    </ItemGroup>

    <!--Remove iOS -->
    <ItemGroup Condition="$(TargetFramework.StartsWith('net9.0-ios')) != true">
        <Compile Remove="**\iOS\**\*.cs" />
        <None Include="**\iOS\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    </ItemGroup>

    <!-- dotnet -->
    <ItemGroup Condition="$(TargetFramework.StartsWith('net9.0-android')) == true">
        <Compile Remove="**\dotnet\**\*.cs" />
        <None Include="**\dotnet\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    </ItemGroup>

    <!-- dotnet -->
    <ItemGroup Condition="$(TargetFramework.StartsWith('net9.0-ios')) == true">
        <Compile Remove="**\dotnet\**\*.cs" />
        <None Include="**\dotnet\**\*.cs" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
    </ItemGroup>

    <!-- Nuget files to be packed -->
    <ItemGroup>
        <None Remove="Components\Pickers\DatePicker\Service\dotnet\" />
        <None Remove="API\Vibration\dotnet\" />
    </ItemGroup>
    <ItemGroup>
        <None Include="..\..\..\assets\dips.png" Pack="true" PackagePath="">
            <Link>dips.png</Link>
        </None>
        <None Include="..\..\..\LICENSE" Pack="true" PackagePath="">
            <Link>LICENSE</Link>
        </None>
        <None Include="..\..\..\README.md" Pack="true" PackagePath="">
            <Link>README.md</Link>
        </None>
    </ItemGroup>

    <!-- Icons -->

    <!-- When referencing the project from nuget package, we make sure to include all raw to the nuget package and inject csproj item groups with the use of .targets -->
    <ItemGroup>
        <None Include="DIPS.Mobile.UI.targets" Pack="True" PackagePath="buildTransitive\" />
    </ItemGroup>
    <!-- When referencing the project directly from VS / Rider -->
    <!-- This forces icons to visually look like its two files in VS / Rider, this is not the case -->
    <ItemGroup>
        <MauiImage Include="Resources\Icons\*.svg" />
    </ItemGroup>
    <ItemGroup>
        <None Include="Resources\Icons\*.svg" Pack="True" PackagePath="buildTransitive\Resources\Icons\" />
    </ItemGroup>

    <!-- Animations -->
    <ItemGroup>
        <MauiAsset Condition="'$(DIPSIncludeAnimations)' == 'True' OR '$(DIPSIncludeAnimations)' == ''" Include="Resources\Animations\*.json" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>
    <ItemGroup>
        <None Include="Resources\Animations\*.json" Pack="True" PackagePath="buildTransitive\Resources\Animations\" />
    </ItemGroup>

    <!-- Splash -->
    <!-- When referencing the project from nuget package, we make sure to include the svgs to the nuget package and inject csproj item groups with the use of .targets -->

    <!-- When referencing the project directly from VS / Rider -->
    <!-- This forces splash to visually look like its two files in VS / Rider, this is not the case -->
    <ItemGroup>
        <MauiSplashScreen Condition="'$(DIPSIncludeSplashScreen)' == 'True' OR '$(DIPSIncludeSplashScreen)' == ''" Include="Resources\Splash\splash.svg" Color="#ff047f89" />
    </ItemGroup>
    <ItemGroup>
        <None Include="Resources\Splash\splash.svg" Pack="True" PackagePath="buildTransitive\Resources\Splash\" />
    </ItemGroup>

    <!-- SyntaxHighlighting Web packaging Highlight.js to use for JsonViewer component-->
    <ItemGroup>
        <MauiAsset Include="Components\SyntaxHighlighting\syntax-highlighting\*.js" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
        <MauiAsset Include="Components\SyntaxHighlighting\syntax-highlighting\*.css" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>
    <ItemGroup>
        <None Include="Components\SyntaxHighlighting\syntax-highlighting\*.js" Pack="True" PackagePath="buildTransitive\Components\SyntaxHighlighting\syntax-highlighting\" />
        <None Include="Components\SyntaxHighlighting\syntax-highlighting\*.css" Pack="True" PackagePath="buildTransitive\Components\SyntaxHighlighting\syntax-highlighting\" />
    </ItemGroup>
    <ItemGroup>
        <Folder Include="Components\Pickers\DatePicker\iOS\" />
        <Folder Include="Resources\Splash\" />
        <Folder Include="API\Vibration\dotnet\" />
    </ItemGroup>
    <ItemGroup Condition="'$(TargetFramework)' == 'net9.0-android'">
        <PackageReference Include="Xamarin.AndroidX.Core.SplashScreen" />
        <PackageReference Include="Xamarin.Google.MLKit.BarcodeScanning" />
        <PackageReference Include="Xamarin.AndroidX.Camera.View" />
        <PackageReference Include="Xamarin.AndroidX.Camera.Camera2" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Maui.Controls" />
        <!-- This makes sure people can debug the library https://github.com/dotnet/sourcelink?tab=readme-ov-file#githubcom-and-github-enterprise -->
        <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All"/>
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Update="Resources\LocalizedStrings\LocalizedStrings\DUILocalizedStrings.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>DUILocalizedStrings.Designer.cs</LastGenOutput>
        </EmbeddedResource>
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="SkiaSharp.Extended.UI.Maui" />
    </ItemGroup>
    <ItemGroup>
      <AdditionalFiles Include="Components\SyntaxHighlighting\syntax-highlighting\default.min.css" />
    </ItemGroup>
</Project>
